Spring
library approach for API specification
Modules:
Spring Core
Spring MVC
Spring Web
Spring AOP- aspect oriented programming
Spring ORM- Object Relational Mapping
fundamental principles of Spring
 **IOC** , handles dependancies
 -IOC Container, uses DI to achieve IOC
 **Dependancy Injection**
@Autowired, indicates dependancy should be injected
whenever you see, inject
-instance variables, constructors, setter methods
@Component, bean managed by container
@Configuration

IOC- manages bean, lifecycle of bean
creation
injecting bean
init / postconstruct
destroy- whenever it is not used anymore, no more ref -get garbage collected
scope- how long it should hold bean
-singleton: only 1 obj creation (design pattern)
-prototype: creates new obj everytime it access it
-request: new obj for every req- Http req.............web apps
-session: new obj for every session
-application:


data access object- db connectivity
data transfer object- web call/ sending req
pojo - plain old java objects
do -domain object

07/06/23

Spring boot
provides tools/techniques, benefits to manage spring applications
***create, develop, deploy, monitor
features:
initializer: help you to create a project
starter projects: pom.xml-> parent -> group of dependencies already defined in starter projects

auto configuration: takes care of configuring spring applications, part of spring boot annotation
@SpringBootApplication: builds ,packages and deploys on a server(tomcat-embedded server)
comb of 3 annotations
enable autoconfig: automatically configs
ComponentScan-
Configuration

dev tools


embedded application server
prod grade metric using actuator

**SpringBootApp**
@RestController: accepts req coming from web : sending req and getting response
browser sending req and getting response
@RequestMapping("/resource");
@GetMapping
tomcat-embedded server- taking req from port 8080 and giving response

**REST**
GET: read the state (read from in memory)
POST: create the state (store in memory): needs restclient (POstman)
PUT-- update
DELETE- del


// spring initializer - created spring project
    // spring web, lombok
// imported to intellij
// Created class and annotated with @RestController and @RequestMapping
// create methods and annotate for GET, POST , PUT and Delete
// Create service layer class and anotate with @Service
// store data into a list
// Autowire into Resource class
// Install Postman
// test all the 4reqeust types


















